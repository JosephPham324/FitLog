// <auto-generated />
using System;
using FitLog.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitLog.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetRoleAspNetUser", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AspNetRoleAspNetUser");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("FitLog.Domain.Entities.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FacebookID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex1")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FitLog.Domain.Entities.Certification", b =>
                {
                    b.Property<int>("CertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CertificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificationId"));

                    b.Property<DateOnly?>("CertificationDateIssued")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("CertificationExpirationData")
                        .HasColumnType("date");

                    b.Property<string>("CertificationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("CertificationId")
                        .HasName("PK__Certific__1237E5AAC39A9000");

                    b.HasIndex("UserId");

                    b.ToTable("Certification", (string)null);
                });

            modelBuilder.Entity("FitLog.Domain.Entities.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChatID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ChatId")
                        .HasName("PK__Chat__A9FBE62670E630D1");

                    b.ToTable("Chat", (string)null);
                });

            modelBuilder.Entity("FitLog.Domain.Entities.ChatLine", b =>
                {
                    b.Property<int>("ChatLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChatLineID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatLineId"));

                    b.Property<string>("AttachmentPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ChatId")
                        .HasColumnType("int")
                        .HasColumnName("ChatID");

                    b.Property<string>("ChatLineText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LinkUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ChatLineId")
                        .HasName("PK__ChatLine__3EC271E3197D524A");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatLine", (string)null);
                });

            modelBuilder.Entity("FitLog.Domain.Entities.CoachApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StatusUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("StatusUpdatedById");

                    b.ToTable("CoachApplications");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.CoachingBooking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<int?>("CoachingServiceId")
                        .HasColumnType("int")
                        .HasColumnName("CoachingServiceID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("BookingId")
                        .HasName("PK__Coaching__73951ACDD5A42ACC");

                    b.HasIndex("CoachingServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("CoachingBooking", (string)null);
                });

            modelBuilder.Entity("FitLog.Domain.Entities.CoachingService", b =>
                {
                    b.Property<int>("CoachingServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CoachingServiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoachingServiceId"));

                    b.Property<string>("AvailabilityAnnouncement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<bool?>("ServiceAvailability")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CoachingServiceId")
                        .HasName("PK__Coaching__7CB5DCB74574309F");

                    b.HasIndex("CreatedBy");

                    b.ToTable("CoachingService", (string)null);
                });

            modelBuilder.Entity("FitLog.Domain.Entities.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EquipmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<string>("EquipmentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageURL");

                    b.HasKey("EquipmentId")
                        .HasName("PK__Equipmen__34474599B3C7BF43");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExerciseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DemoUrl")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DemoURL");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("EquipmentID");

                    b.Property<string>("ExerciseName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MuscleGroupId")
                        .HasColumnType("int")
                        .HasColumnName("MuscleGroupID");

                    b.Property<bool?>("PublicVisibility")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ExerciseId")
                        .HasName("PK__Exercise__A074AD0F37A63A03");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EquipmentId");

                    b.HasIndex(new[] { "MuscleGroupId" }, "IDX_Exercise_MuscleGroupID");

                    b.ToTable("Exercise", (string)null);
                });

            modelBuilder.Entity("FitLog.Domain.Entities.ExerciseLog", b =>
                {
                    b.Property<int>("ExerciseLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExerciseLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseLogId"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("ExerciseID");

                    b.Property<string>("FootageURLsList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FootageUrls")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FootageURLs");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfReps")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NumberOfReps");

                    b.Property<string>("NumberOfRepsValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfSets")
                        .HasColumnType("int");

                    b.Property<int?>("OrderInSession")
                        .HasColumnType("int");

                    b.Property<int?>("OrderInSuperset")
                        .HasColumnType("int");

                    b.Property<string>("WeightsUsed")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WeightsUsed");

                    b.Property<string>("WeightsUsedValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkoutLogId")
                        .HasColumnType("int")
                        .HasColumnName("WorkoutLogID");

                    b.HasKey("ExerciseLogId")
                        .HasName("PK__Exercise__EE96A3631179C9B6");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutLogId");

                    b.ToTable("ExerciseLog", (string)null);
                });

            modelBuilder.Entity("FitLog.Domain.Entities.MuscleGroup", b =>
                {
                    b.Property<int>("MuscleGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MuscleGroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MuscleGroupId"));

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("MuscleGroupName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MuscleGroupId")
                        .HasName("PK__MuscleGr__097AE8062C42CCA3");

                    b.ToTable("MuscleGroup", (string)null);
                });

            modelBuilder.Entity("FitLog.Domain.Entities.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "overview");

                    b.Property<string>("GalleryImageLinks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GalleryImageLinksJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GalleryImageLinks");

                    b.Property<string>("MajorAchievements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProfilePicture");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ProfileId")
                        .HasName("PK__Profile__290C88848C6B876C");

                    b.HasIndex("UserId");

                    b.ToTable("Profile", null, t =>
                        {
                            t.Property("GalleryImageLinks")
                                .HasColumnName("GalleryImageLinks1");
                        });
                });

            modelBuilder.Entity("FitLog.Domain.Entities.Program", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramId"));

                    b.Property<string>("AgeGroup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DaysPerWeek")
                        .HasColumnType("int");

                    b.Property<string>("ExperienceLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Goal")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("GymType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MusclesPriority")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("NumberOfWeeks")
                        .HasColumnType("int");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProgramThumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PublicProgram")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ProgramId")
                        .HasName("PK__Program__752560385E73D9F3");

                    b.HasIndex("UserId");

                    b.ToTable("Program", (string)null);
                });

            modelBuilder.Entity("FitLog.Domain.Entities.ProgramEnrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EnrollmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<int?>("CurrentWeekNo")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentWorkoutOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EnrolledDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("EnrollmentId")
                        .HasName("PK__ProgramE__7F6877FBA65A74F3");

                    b.HasIndex("ProgramId");

                    b.HasIndex("UserId");

                    b.ToTable("ProgramEnrollment", (string)null);
                });

            modelBuilder.Entity("FitLog.Domain.Entities.ProgramWorkout", b =>
                {
                    b.Property<int>("ProgramWorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgramWorkoutID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramWorkoutId"));

                    b.Property<int?>("OrderInWeek")
                        .HasColumnType("int");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("WeekNumber")
                        .HasColumnType("int");

                    b.Property<int?>("WorkoutTemplateId")
                        .HasColumnType("int")
                        .HasColumnName("WorkoutTemplateID");

                    b.HasKey("ProgramWorkoutId")
                        .HasName("PK__ProgramW__6475206B460CD37C");

                    b.HasIndex("ProgramId");

                    b.HasIndex("WorkoutTemplateId");

                    b.ToTable("ProgramWorkout", (string)null);
                });

            modelBuilder.Entity("FitLog.Domain.Entities.SurveyAnswer", b =>
                {
                    b.Property<int>("SurveyAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SurveyAnswerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyAnswerId"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("DaysPerWeek")
                        .HasColumnType("int");

                    b.Property<string>("ExperienceLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Goal")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("GymType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MusclesPriority")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("SurveyAnswerId")
                        .HasName("PK__SurveyAn__E5C3DB53339411C2");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyAnswers");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.TodoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Reminder")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.TodoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TodoLists");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.WorkoutLog", b =>
                {
                    b.Property<int>("WorkoutLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkoutLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutLogId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly?>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkoutLogId")
                        .HasName("PK__WorkoutL__592592550AEBF56C");

                    b.HasIndex("CreatedBy");

                    b.ToTable("WorkoutLog", (string)null);
                });

            modelBuilder.Entity("FitLog.Domain.Entities.WorkoutTemplate", b =>
                {
                    b.Property<int>("WorkoutTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkoutTemplateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutTemplateId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WorkoutTemplateId")
                        .HasName("PK__WorkoutT__8959FF2F261B5AB7");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("WorkoutTemplate", (string)null);
                });

            modelBuilder.Entity("FitLog.Domain.Entities.WorkoutTemplateExercise", b =>
                {
                    b.Property<int>("ExerciseTemlateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExerciseTemlateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseTemlateId"));

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("ExerciseID");

                    b.Property<int?>("IntensityPercentage")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumbersOfReps")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OrderInSession")
                        .HasColumnType("int");

                    b.Property<int?>("OrderInSuperset")
                        .HasColumnType("int");

                    b.Property<int?>("RpeRecommendation")
                        .HasColumnType("int");

                    b.Property<int?>("SetsRecommendation")
                        .HasColumnType("int");

                    b.Property<string>("WeightsUsed")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("WorkoutTemplateId")
                        .HasColumnType("int")
                        .HasColumnName("WorkoutTemplateID");

                    b.HasKey("ExerciseTemlateId")
                        .HasName("PK__WorkoutT__2F7444A27D57BE2E");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutTemplateId");

                    b.ToTable("WorkoutTemplateExercise", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRoleClaim<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserLogin<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserToken<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FitLog.Domain.Entities.AspNetRoleClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.HasDiscriminator().HasValue("AspNetRoleClaim");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.AspNetUserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.HasDiscriminator().HasValue("AspNetUserClaim");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.AspNetUserLogin", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>");

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("AspNetUserId");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.HasDiscriminator().HasValue("AspNetUserLogin");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.AspNetUserToken", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserToken<string>");

                    b.HasDiscriminator().HasValue("AspNetUserToken");
                });

            modelBuilder.Entity("AspNetRoleAspNetUser", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitLog.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitLog.Domain.Entities.Certification", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetUser", "User")
                        .WithMany("Certifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Certifica__UserI__29572725");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.ChatLine", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.Chat", "Chat")
                        .WithMany("ChatLines")
                        .HasForeignKey("ChatId")
                        .HasConstraintName("FK__ChatLine__ChatID__6754599E");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.CoachApplication", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetUser", "Applicant")
                        .WithMany("CoachApplications")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitLog.Domain.Entities.AspNetUser", "StatusUpdatedBy")
                        .WithMany("CoachApplicationsUpdated")
                        .HasForeignKey("StatusUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Applicant");

                    b.Navigation("StatusUpdatedBy");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.CoachingBooking", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.CoachingService", "CoachingService")
                        .WithMany("CoachingBookings")
                        .HasForeignKey("CoachingServiceId")
                        .HasConstraintName("FK__CoachingB__Coach__5FB337D6");

                    b.HasOne("FitLog.Domain.Entities.AspNetUser", "User")
                        .WithMany("CoachingBookings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__CoachingB__UserI__5EBF139D");

                    b.Navigation("CoachingService");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.CoachingService", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetUser", "CreatedByNavigation")
                        .WithMany("CoachingServices")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__CoachingS__Creat__5BE2A6F2");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.Exercise", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetUser", "CreatedByNavigation")
                        .WithMany("Exercises")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Exercise__Create__35BCFE0A");

                    b.HasOne("FitLog.Domain.Entities.Equipment", "Equipment")
                        .WithMany("Exercises")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("FK__Exercise__Equipm__37A5467C");

                    b.HasOne("FitLog.Domain.Entities.MuscleGroup", "MuscleGroup")
                        .WithMany("Exercises")
                        .HasForeignKey("MuscleGroupId")
                        .HasConstraintName("FK__Exercise__Muscle__36B12243");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Equipment");

                    b.Navigation("MuscleGroup");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.ExerciseLog", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.Exercise", "Exercise")
                        .WithMany("ExerciseLogs")
                        .HasForeignKey("ExerciseId")
                        .HasConstraintName("FK__ExerciseL__Exerc__571DF1D5");

                    b.HasOne("FitLog.Domain.Entities.WorkoutLog", "WorkoutLog")
                        .WithMany("ExerciseLogs")
                        .HasForeignKey("WorkoutLogId")
                        .HasConstraintName("FK__ExerciseL__Worko__5629CD9C");

                    b.Navigation("Exercise");

                    b.Navigation("WorkoutLog");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.Profile", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetUser", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Profile__UserID__267ABA7A");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.Program", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetUser", "User")
                        .WithMany("Programs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Program__UserID__44FF419A");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.ProgramEnrollment", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.Program", "Program")
                        .WithMany("ProgramEnrollments")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK__ProgramEn__Progr__4AB81AF0");

                    b.HasOne("FitLog.Domain.Entities.AspNetUser", "User")
                        .WithMany("ProgramEnrollments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__ProgramEn__UserI__49C3F6B7");

                    b.Navigation("Program");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.ProgramWorkout", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.Program", "Program")
                        .WithMany("ProgramWorkouts")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK__ProgramWo__Progr__4F7CD00D");

                    b.HasOne("FitLog.Domain.Entities.WorkoutTemplate", "WorkoutTemplate")
                        .WithMany("ProgramWorkouts")
                        .HasForeignKey("WorkoutTemplateId")
                        .HasConstraintName("FK__ProgramWo__Worko__5070F446");

                    b.Navigation("Program");

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.SurveyAnswer", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetUser", "User")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__SurveyAns__UserI__6B24EA82");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.TodoItem", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.TodoList", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.TodoList", b =>
                {
                    b.OwnsOne("FitLog.Domain.ValueObjects.Colour", "Colour", b1 =>
                        {
                            b1.Property<int>("TodoListId")
                                .HasColumnType("int");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TodoListId");

                            b1.ToTable("TodoLists");

                            b1.WithOwner()
                                .HasForeignKey("TodoListId");
                        });

                    b.Navigation("Colour")
                        .IsRequired();
                });

            modelBuilder.Entity("FitLog.Domain.Entities.WorkoutLog", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetUser", "CreatedByNavigation")
                        .WithMany("WorkoutLogs")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__WorkoutLo__Creat__534D60F1");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.WorkoutTemplate", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetUser", "CreatedByNavigation")
                        .WithMany("WorkoutTemplateCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__WorkoutTe__Creat__3B75D760");

                    b.HasOne("FitLog.Domain.Entities.AspNetUser", "LastModifiedByNavigation")
                        .WithMany("WorkoutTemplateLastModifiedByNavigations")
                        .HasForeignKey("LastModifiedBy")
                        .HasConstraintName("FK__WorkoutTe__LastM__3C69FB99");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("LastModifiedByNavigation");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.WorkoutTemplateExercise", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.Exercise", "Exercise")
                        .WithMany("WorkoutTemplateExercises")
                        .HasForeignKey("ExerciseId")
                        .HasConstraintName("FK__WorkoutTe__Exerc__403A8C7D");

                    b.HasOne("FitLog.Domain.Entities.WorkoutTemplate", "WorkoutTemplate")
                        .WithMany("WorkoutTemplateExercises")
                        .HasForeignKey("WorkoutTemplateId")
                        .HasConstraintName("FK__WorkoutTe__Worko__3F466844");

                    b.Navigation("Exercise");

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitLog.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitLog.Domain.Entities.AspNetRoleClaim", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.AspNetUserClaim", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.AspNetUserLogin", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetUser", null)
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("AspNetUserId");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.AspNetUserToken", b =>
                {
                    b.HasOne("FitLog.Domain.Entities.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("Certifications");

                    b.Navigation("CoachApplications");

                    b.Navigation("CoachApplicationsUpdated");

                    b.Navigation("CoachingBookings");

                    b.Navigation("CoachingServices");

                    b.Navigation("Exercises");

                    b.Navigation("Profiles");

                    b.Navigation("ProgramEnrollments");

                    b.Navigation("Programs");

                    b.Navigation("SurveyAnswers");

                    b.Navigation("WorkoutLogs");

                    b.Navigation("WorkoutTemplateCreatedByNavigations");

                    b.Navigation("WorkoutTemplateLastModifiedByNavigations");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.Chat", b =>
                {
                    b.Navigation("ChatLines");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.CoachingService", b =>
                {
                    b.Navigation("CoachingBookings");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.Equipment", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.Exercise", b =>
                {
                    b.Navigation("ExerciseLogs");

                    b.Navigation("WorkoutTemplateExercises");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.MuscleGroup", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.Program", b =>
                {
                    b.Navigation("ProgramEnrollments");

                    b.Navigation("ProgramWorkouts");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.TodoList", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.WorkoutLog", b =>
                {
                    b.Navigation("ExerciseLogs");
                });

            modelBuilder.Entity("FitLog.Domain.Entities.WorkoutTemplate", b =>
                {
                    b.Navigation("ProgramWorkouts");

                    b.Navigation("WorkoutTemplateExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
